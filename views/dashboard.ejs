<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="" />
    <meta name="author" content="" />
    <title>Dashboard - Sasohae Admin</title>
    <link href="https://cdn.jsdelivr.net/npm/simple-datatables@latest/dist/style.css" rel="stylesheet" />
    <link href="../public/css/styles.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/js/all.min.js"
        crossorigin="anonymous"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.2.4/jquery.min.js"></script>
    <script src="../public/js/dashboard.js"></script>

    <style>
        body,
        button,
        input,
        textarea {
            font-family: 'Noto Sans KR', sans-serif;
        }

        td {
            font-size: medium;
        }

        .dataTable-sorter {
            text-align: center;
            font-size: medium;
        }
    </style>

</head>

<body class="sb-nav-fixed">
    <%- include ('layoutHeader') %>
        <!-- side bar start -->
        <div id="layoutSidenav"></div>
        <%- include ('layoutBody') %>
            <!-- side bar end -->
            <div id="layoutSidenav_content">
                <main>
                    <div class="container-fluid px-4">
                        <h1 class="mt-4">ÏÇ¨.ÏÜå.Ìï¥üìä ÎåÄÏãúÎ≥¥Îìú</h1>
                        <ol class="breadcrumb mb-4">
                            <li class="breadcrumb-item active">SASOHAE DASHBOARD</li>
                        </ol>
                        <div class="row">
                            <div class="col-xl-3 col-md-6">
                                <div class="card bg-primary text-white mb-4">
                                    <div class="card-body">ÏÑ†Î¨ºÎ™©Î°ù ÏÑúÎπÑÏä§ Í¥ÄÎ¶¨</div>
                                    <div class="card-footer d-flex align-items-center justify-content-between">
                                        <a class="small text-white stretched-link" href="#">View Details</a>
                                        <div class="small text-white"><i class="fas fa-angle-right"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-3 col-md-6">
                                <div class="card bg-warning text-white mb-4">
                                    <div class="card-body">Î©îÎâ¥Î™©Î°ù ÏÑúÎπÑÏä§ Í¥ÄÎ¶¨</div>
                                    <div class="card-footer d-flex align-items-center justify-content-between">
                                        <a class="small text-white stretched-link" href="#">View Details</a>
                                        <div class="small text-white"><i class="fas fa-angle-right"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-3 col-md-6">
                                <div class="card bg-success text-white mb-4">
                                    <div class="card-body">Ï∂ïÏùòÍ∏à ÏÑúÎπÑÏä§ Í¥ÄÎ¶¨</div>
                                    <div class="card-footer d-flex align-items-center justify-content-between">
                                        <a class="small text-white stretched-link" href="#">View Details</a>
                                        <div class="small text-white"><i class="fas fa-angle-right"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-3 col-md-6">
                                <div class="card bg-danger text-white mb-4">
                                    <div class="card-body">Í≤åÏãúÌåê ÏÑúÎπÑÏä§ Í¥ÄÎ¶¨</div>
                                    <div class="card-footer d-flex align-items-center justify-content-between">
                                        <a class="small text-white stretched-link" href="#">View Details</a>
                                        <div class="small text-white"><i class="fas fa-angle-right"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-xl-6">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <i class="fas fa-chart-bar me-1"></i>
                                        ÏùºÎ≥Ñ Î∞©Î¨∏Ïûê Ïàò
                                    </div>
                                    <div class="card-body"><canvas id="dayChart" width="100%" height="40"></canvas>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-6">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <i class="fas fa-chart-area me-1"></i>
                                        ÏãúÍ∞ÑÎåÄÎ≥Ñ Î∞©Î¨∏Ïûê Ïàò
                                    </div>
                                    <div class="card-body"><canvas id="timeChart" width="100%" height="40"></canvas>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-6">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <i class="fas fa-chart-bar me-1"></i>
                                        Í∞Å Í∏∞Îä•Î≥Ñ ÏÇ¨Ïö©Ïûê Ïàò
                                    </div>
                                    <div class="card-body"><canvas id="statisticsChart" width="100%"
                                            height="40"></canvas>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-6">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <i class="fas fa-chart-pie me-1"></i>
                                        Ï£ºÏöî 4Í∞ÄÏßÄ Í∏∞Îä•Î≥Ñ ÏÇ¨Ïö©Ïûê Ïàò
                                    </div>
                                    <div class="card-body"><canvas id="userChart" width="100%" height="40"></canvas>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-6">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <i class="fas fa-chart-pie me-1"></i>
                                        ÏÑ†Î¨ºÏ∂îÏ≤úÍ∏∞Îä• ÏÇ¨Ïö©Ïûê ÎπÑÍµê (ÏÑ§Î¨∏ : ÎûúÎç§)
                                    </div>
                                    <div class="card-body"><canvas id="giftUserChart" width="100%" height="40"></canvas>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-6">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <i class="fas fa-chart-pie me-1"></i>
                                        Í≥†ÎØºÍ≤åÏãúÌåê (ÎØ∏ÏûëÏÑ±Ïûê : ÏûëÏÑ±Ïûê)
                                    </div>
                                    <div class="card-body"><canvas id="boardUserChart" width="100%"
                                            height="40"></canvas>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-6">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <i class="fas fa-chart-bar me-1"></i>
                                        ÏÑ†Î¨ºÏ∂îÏ≤ú Ïàò top 20
                                    </div>
                                    <div class="card-body"><canvas id="giftChart" width="100%" height="40"></canvas>
                                    </div>
                                </div>
                            </div>
                            <div class="col-xl-6">
                                <div class="card mb-4">
                                    <div class="card-header">
                                        <i class="fas fa-chart-bar me-1"></i>
                                        Î©îÎâ¥Ï∂îÏ≤ú Ïàò top 20
                                    </div>
                                    <div class="card-body"><canvas id="menuChart" width="100%" height="40"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </main>
                <!-- footer start -->
                <footer>
                    <%- include ('layoutFooter') %>
                </footer>
                <!-- footer start -->
            </div>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
                crossorigin="anonymous"></script>
            <script src="../public/js/scripts.js"></script>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js"
                crossorigin="anonymous"></script>
            <script>
                // Set new default font family and font color to mimic Bootstrap's default styling
                Chart.defaults.global.defaultFontFamily =
                    '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
                Chart.defaults.global.defaultFontColor = "#292b2c";

                $(document).ready(function () {
                    getAcessTime();
                    getStatistics();
                    getGiftData();
                    getMenuData();
                });

                function getAcessTime() {
                    let userAccessPerDay = [];
                    let userAccessTime = [];
                    let temp = [];
                    $.ajax({
                        type: "GET",
                        url: "/api/user",
                        data: {},
                        success: function (response) {
                            let tempDate;
                            for (let i = 0; i < response.length; i++) {
                                tempDate = new Date(response[Object.keys(response)[i]].createdAt);
                                temp[i] = String(tempDate.toLocaleString()).split(' ');

                                userAccessPerDay[i] = temp[i].slice(0, 3);
                                userAccessTime[i] = temp[i].slice(3, 5);
                            }
                            makeDayChart(userAccessPerDay);
                            makeTimeChart(userAccessTime);
                        }
                    })
                }

                function makeDayChart(data) {
                    const info = data;
                    const firstMonth = parseInt(info[0][1].slice(0, info[0][1].length - 1)); // ÏùºÎã® 6Í∞úÏõîÏ†ïÎèÑ ÏÑúÎπÑÏä§ÏòàÏ†ïÏù¥ÎØÄÎ°ú Ïó∞ÎèÑÎäî Í≥†Î†§ x
                    const lastMonth = parseInt(info[info.length - 1][1].slice(0, info[info.length - 1][1].length - 1));
                    const firstDay = parseInt(info[0][2].slice(0, info[0][2].length - 1));
                    const lastDay = parseInt(info[info.length - 1][2].slice(0, info[info.length - 1][2].length - 1));

                    let dayCnt = [];

                    for (let i = 0; i <= lastMonth - firstMonth; i++) { // month
                        dayCnt[i] = [];
                        for (let j = 0; j < 31; j++) { // day
                            dayCnt[i][j] = 0;
                        }
                    }

                    for (let i = 0; i < info.length; i++) {
                        dayCnt[parseInt(info[i][1].slice(0, info[i][1].length - 1)) - 1][parseInt(info[i][2].slice(0, info[i][2].length - 1)) - 1]++;
                    }

                    let serviceMonth = [];
                    let serviceDay = [];
                    let serviceDate = [];
                    let visitorCnt = [];

                    if (firstMonth === lastMonth) {
                        for (let i = firstDay; i <= lastDay; i++) {
                            serviceMonth[i - firstDay] = firstMonth;
                            serviceDay.push(i);
                            serviceDate.push((serviceMonth[i - firstDay] + "/" + serviceDay[i - firstDay]));
                            visitorCnt.push(dayCnt[firstMonth - 1][i - 1]);
                        }

                    } else {

                    }

                    console.log(serviceMonth)
                    console.log(serviceDay)
                    console.log(serviceDate)
                    console.log(visitorCnt)

                    const ctx = document.getElementById("dayChart");
                    const myLineChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: serviceDate,
                            datasets: [{
                                label: "Ï†ëÏÜçÏûê Ïàò",
                                backgroundColor: "rgba(2,117,216,1)",
                                borderColor: "rgba(2,117,216,1)",
                                data: visitorCnt,
                            }],
                        },
                        options: {
                            scales: {
                                xAxes: [{
                                    time: {
                                        unit: 'day'
                                    },
                                    gridLines: {
                                        display: false
                                    },
                                    // ticks: { // Í∞ÄÎ°úÏ∂ï ÏòµÏÖò ÌïÑÏöîÏãú ÏÇ¨Ïö©
                                    //     maxTicksLimit: 6
                                    // }
                                }],
                                yAxes: [{
                                    ticks: {
                                        min: 0,
                                        max: Math.ceil(Math.max(...visitorCnt) / (Math.pow(10, (Math.max(...visitorCnt)).toString().length - 1))) * (Math.pow(10, (Math.max(...visitorCnt)).toString().length - 1)),
                                        maxTicksLimit: 5
                                    },
                                    gridLines: {
                                        display: true
                                    }
                                }],
                            },
                            legend: {
                                display: false
                            }
                        }
                    });
                }

                function makeTimeChart(data) {
                    const info = data;
                    let timeCnt = new Array(24).fill(0);
                    let tempTime = 0;

                    for (let i = 0; i < info.length; i++) {
                        tempTime = parseInt(info[i][1].split(':')[0]);
                        if (info[i][0] === "Ïò§ÌõÑ") {
                            tempTime += 12;
                            if (tempTime === 24) { // Î∞§12Ïãú
                                tempTime = 0;
                            }
                        }
                        timeCnt[tempTime]++;
                    }

                    const ctx = document.getElementById("timeChart");
                    const myLineChart = new Chart(ctx, {
                        type: "line",
                        data: {
                            labels: [
                                "00:00", "01:00", "02:00", "03:00", "04:00", "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00",
                                "12:00", "13:00", "14:00", "15:00", "16:00", "17:00", "18:00", "19:00", "20:00", "21:00", "22:00", "23:00",
                            ],
                            datasets: [
                                {
                                    label: "Ï†ëÏÜçÏûê Ïàò",
                                    lineTension: 0.3,
                                    backgroundColor: "rgba(2,117,216,0.2)",
                                    borderColor: "rgba(2,117,216,1)",
                                    pointRadius: 5,
                                    pointBackgroundColor: "rgba(2,117,216,1)",
                                    pointBorderColor: "rgba(255,255,255,0.8)",
                                    pointHoverRadius: 5,
                                    pointHoverBackgroundColor: "rgba(2,117,216,1)",
                                    pointHitRadius: 50,
                                    pointBorderWidth: 2,
                                    data: timeCnt,
                                },
                            ],
                        },
                        options: {
                            scales: {
                                xAxes: [
                                    {
                                        time: {
                                            unit: "time",
                                        },
                                        gridLines: {
                                            display: false,
                                        },
                                        ticks: {
                                            maxTicksLimit: 7,
                                        },
                                    },
                                ],
                                yAxes: [
                                    {
                                        ticks: {
                                            min: 0,
                                            max: Math.ceil(Math.max(...timeCnt) / (Math.pow(10, (Math.max(...timeCnt)).toString().length - 1))) * (Math.pow(10, (Math.max(...timeCnt)).toString().length - 1)),
                                            maxTicksLimit: 5,
                                        },
                                        gridLines: {
                                            color: "rgba(0, 0, 0, .125)",
                                        },
                                    },
                                ],
                            },
                            legend: {
                                display: false,
                            },
                        },
                    });
                }

                function getStatistics() {
                    $.ajax({
                        type: "GET",
                        url: "/api/statistics",
                        data: {},
                        success: function (response) {
                            const temp = response[Object.keys(response)[0]];
                            makeStatisticsChart(temp);
                            makeUserChart(temp);
                            makeGiftUserChart(temp);
                            makeBoardUserChart(temp);
                        }
                    })
                }

                function makeStatisticsChart(data) {
                    const info = data;
                    const userCnt = [
                        info.totVisitorCnt,
                        info.giftSurveyUsersCnt,
                        info.giftRandomUsersCnt,
                        info.menuUsersCnt,
                        info.moneyUsersCnt,
                        info.boardUsersCnt,
                        info.boardWriteUsersCnt,
                    ];

                    const ctx = document.getElementById("statisticsChart");
                    const myLineChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: ['Ï†ÑÏ≤¥Î∞©Î¨∏Ïûê', 'ÏÑ†Î¨ºÏ∂îÏ≤ú', 'ÏÑ†Î¨ºÎûúÎç§Ï∂îÏ≤ú', 'Î©îÎâ¥Ï∂îÏ≤ú', 'Ï∂ïÏùòÍ∏àÏ∂îÏ≤ú', 'Í≥†ÎØºÍ≤åÏãúÌåêÎ∞©Î¨∏Ïûê', 'Í≥†ÎØºÍ≤åÏãúÌåêÏûëÏÑ±Ïûê'],
                            datasets: [{
                                label: "Ïù∏Ïõê Ïàò",
                                backgroundColor: "rgba(2,117,216,1)",
                                borderColor: "rgba(2,117,216,1)",
                                data: userCnt,
                            }],
                        },
                        options: {
                            scales: {
                                xAxes: [{
                                    gridLines: {
                                        display: false
                                    },
                                    // ticks: { // Í∞ÄÎ°úÏ∂ï ÏòµÏÖò ÌïÑÏöîÏãú ÏÇ¨Ïö©
                                    //     maxTicksLimit: 6
                                    // }
                                }],
                                yAxes: [{
                                    ticks: {
                                        min: 0,
                                        max: Math.ceil(Math.max(...userCnt) / (Math.pow(10, (Math.max(...userCnt)).toString().length - 1))) * (Math.pow(10, (Math.max(...userCnt)).toString().length - 1)),
                                        maxTicksLimit: 5
                                    },
                                    gridLines: {
                                        display: true
                                    }
                                }],
                            },
                            legend: {
                                display: false
                            }
                        }
                    });
                }

                function makeUserChart(data) {
                    const info = data;
                    let randomColor = [];

                    for (let i = 0; i < 4; i++) {
                        randomColor[i] = "#" + Math.round(Math.random() * 0xffffff).toString(16);
                    }

                    tempData = {
                        datasets: [{
                            backgroundColor: randomColor,
                            data: [info.giftSurveyUsersCnt + info.giftRandomUsersCnt, info.menuUsersCnt, info.moneyUsersCnt, info.boardWriteUsersCnt]
                        }],
                        labels: ['ÏÑ†Î¨ºÏ∂îÏ≤ú', 'Î©îÎâ¥Ï∂îÏ≤ú', 'Ï∂ïÏùòÍ∏àÏ∂îÏ≤ú', 'Í≥†ÎØºÍ≤åÏãúÌåê ÏûëÏÑ±Ïûê Ïàò']
                    };
                    const ctx = document.getElementById("userChart");
                    const myPieChart = new Chart(ctx, {
                        type: 'pie',
                        data: tempData,
                        options: {}
                    });
                }

                function makeGiftUserChart(data) {
                    const info = data;
                    let randomColor = [];

                    for (let i = 0; i < 2; i++) {
                        randomColor[i] = "#" + Math.round(Math.random() * 0xffffff).toString(16);
                    }

                    tempData = {
                        datasets: [{
                            backgroundColor: randomColor,
                            data: [info.giftSurveyUsersCnt, info.giftRandomUsersCnt]
                        }],
                        labels: ['ÏßàÎ¨∏', 'ÎûúÎç§']
                    };
                    const ctx = document.getElementById("giftUserChart");
                    const myPieChart = new Chart(ctx, {
                        type: 'doughnut',
                        data: tempData,
                        options: {}
                    });
                }

                function makeBoardUserChart(data) {
                    const info = data;
                    let randomColor = [];

                    for (let i = 0; i < 2; i++) {
                        randomColor[i] = "#" + Math.round(Math.random() * 0xffffff).toString(16);
                    }

                    tempData = {
                        datasets: [{
                            backgroundColor: randomColor,
                            data: [info.boardUsersCnt - info.boardWriteUsersCnt, info.boardWriteUsersCnt]
                        }],
                        labels: ['Î∞©Î¨∏Ïûê Ïàò', 'ÏûëÏÑ±Ïûê Ïàò']
                    };
                    const ctx = document.getElementById("boardUserChart");
                    const myPieChart = new Chart(ctx, {
                        type: 'doughnut',
                        data: tempData,
                        options: {}
                    });
                }

                function getGiftData() {
                    let tempData = [];
                    $.ajax({
                        type: "GET",
                        url: "/api/gifts",
                        data: {},
                        success: function (response) {
                            for (let i = 0; i < response.length; i++) {
                                tempData[i] = {
                                    giftName: response[Object.keys(response)[i]].giftName,
                                    giftRecommendCnt: response[Object.keys(response)[i]].giftRecommendCnt,
                                };
                            }
                            makeGiftChart(tempData);
                        }
                    })
                }

                function makeGiftChart(data) {
                    const info = data; // Í∞ùÏ≤¥Ïùò Î∞∞Ïó¥ÏùÑ Î∞õÏïÑÏÑú
                    result = info.sort(function (a, b) { // giftRecommendCnt Î•º Í∏∞Ï§ÄÏúºÎ°ú ÎÇ¥Î¶ºÏ∞®Ïàú
                        return b.giftRecommendCnt - a.giftRecommendCnt;
                    });

                    let tempGiftName = [];
                    let tempGiftRecommendCnt = [];

                    for (let i = 0; i < 20; i++) {
                        tempGiftName[i] = info[i].giftName;
                        tempGiftRecommendCnt[i] = info[i].giftRecommendCnt;
                    }

                    const ctx = document.getElementById("giftChart");
                    const myLineChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: tempGiftName,
                            datasets: [{
                                label: "Ï∂îÏ≤ú Ïàò",
                                backgroundColor: "rgba(2,117,216,1)",
                                borderColor: "rgba(2,117,216,1)",
                                data: tempGiftRecommendCnt,
                            }],
                        },
                        options: {
                            scales: {
                                xAxes: [{
                                    gridLines: {
                                        display: false
                                    },
                                    // ticks: { // Í∞ÄÎ°úÏ∂ï ÏòµÏÖò ÌïÑÏöîÏãú ÏÇ¨Ïö©
                                    //     maxTicksLimit: 6
                                    // }
                                }],
                                yAxes: [{
                                    ticks: {
                                        min: 0,
                                        max: Math.ceil(Math.max(...tempGiftRecommendCnt) / (Math.pow(10, (Math.max(...tempGiftRecommendCnt)).toString().length - 1))) * (Math.pow(10, (Math.max(...tempGiftRecommendCnt)).toString().length - 1)),
                                        maxTicksLimit: 5
                                    },
                                    gridLines: {
                                        display: true
                                    }
                                }],
                            },
                            legend: {
                                display: false
                            }
                        }
                    });
                }

                function getMenuData() {
                    let tempData = [];
                    $.ajax({
                        type: "GET",
                        url: "/api/menus",
                        data: {},
                        success: function (response) {
                            for (let i = 0; i < response.length; i++) {
                                tempData[i] = {
                                    menuName: response[Object.keys(response)[i]].menuName,
                                    menuRecommendCnt: response[Object.keys(response)[i]].menuRecommendCnt,
                                };
                            }
                            makeMenuChart(tempData);
                        }
                    })
                }

                function makeMenuChart(data) {
                    const info = data; // Í∞ùÏ≤¥Ïùò Î∞∞Ïó¥ÏùÑ Î∞õÏïÑÏÑú
                    result = info.sort(function (a, b) { // menuRecommendCnt Î•º Í∏∞Ï§ÄÏúºÎ°ú ÎÇ¥Î¶ºÏ∞®Ïàú
                        return b.menuRecommendCnt - a.menuRecommendCnt;
                    });

                    let tempMenuName = [];
                    let tempMenuRecommendCnt = [];

                    for (let i = 0; i < 20; i++) {
                        tempMenuName[i] = info[i].menuName;
                        tempMenuRecommendCnt[i] = info[i].menuRecommendCnt;
                    }

                    const ctx = document.getElementById("menuChart");
                    const myLineChart = new Chart(ctx, {
                        type: 'bar',
                        data: {
                            labels: tempMenuName,
                            datasets: [{
                                label: "Ï∂îÏ≤ú Ïàò",
                                backgroundColor: "rgba(2,117,216,1)",
                                borderColor: "rgba(2,117,216,1)",
                                data: tempMenuRecommendCnt,
                            }],
                        },
                        options: {
                            scales: {
                                xAxes: [{
                                    gridLines: {
                                        display: false
                                    },
                                    // ticks: { // Í∞ÄÎ°úÏ∂ï ÏòµÏÖò ÌïÑÏöîÏãú ÏÇ¨Ïö©
                                    //     maxTicksLimit: 6
                                    // }
                                }],
                                yAxes: [{
                                    ticks: {
                                        min: 0,
                                        max: Math.ceil(Math.max(...tempMenuRecommendCnt) / (Math.pow(10, (Math.max(...tempMenuRecommendCnt)).toString().length - 1))) * (Math.pow(10, (Math.max(...tempMenuRecommendCnt)).toString().length - 1)),
                                        maxTicksLimit: 5
                                    },
                                    gridLines: {
                                        display: true
                                    }
                                }],
                            },
                            legend: {
                                display: false
                            }
                        }
                    });
                }
            </script>

</body>

</html>